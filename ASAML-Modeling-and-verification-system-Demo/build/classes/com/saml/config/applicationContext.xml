<?xml version="1.0" encoding="utf-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xsi:schemaLocation="  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd  
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"  
            default-autowire="byName" default-lazy-init="false"> 
    <context:property-placeholder    location="classpath:com/saml/config/database.properties" />
    <!-- 配置第一个数据库 -->
	<bean id="dataSource_saml" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
        p:url="${jdbc.url}"
        p:username="${jdbc.username}" 
        p:password="${jdbc.password}"
        p:maxActive="${jdbc.maxActive}" 
        p:maxIdle="${jdbc.maxIdle}"
        p:minIdle="${jdbc.minIdle}"
        p:maxWait="${jdbc.maxWait}">
    </bean>
    
  <bean id="multipleDataSource" class="com.saml.interceptor.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="dataSource_saml"/>
        <property name="targetDataSources">
            <map>
                <entry key="dataSource_saml" value-ref="dataSource_saml"/>
            </map>
        </property>
    </bean>
    
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      <property name="dataSource" ref="multipleDataSource" />
    </bean>
  
    <!-- 在spring里使用org.mybatis.spring.mapper.MapperScannerConfigurer 进行自动扫描的时候，设置了sqlSessionFactory 的话，
	可能会导致PropertyPlaceholderConfigurer失效，也就是用${jdbc.username}这样之类的表达式，将无法获取到properties文件里的内容。 
	导致这一原因是因为，MapperScannerConigurer实际是在解析加载bean定义阶段的，这个时候要是设置sqlSessionFactory的话，
	会导致提前初始化一些类，这个时候，PropertyPlaceholderConfigurer还没来得及替换定义中的变量，导致把表达式当作字符串复制了。
	解决方案：	id 的名字不能是sqlSessionFactory， -->  
    <bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
     <!--dataSource属性指定要用到的连接池--> 
     <property name="dataSource" ref="multipleDataSource"/> 
     <!--configLocation属性指定mybatis的核心配置文件--> 
     <property name="configLocation" value="classpath:com/saml/config/Configuration.xml" /> 
      <!-- 所有配置的mapper文件 -->
     <property name="mapperLocations" value="classpath*:com/saml/mapper/*.xml" />
  </bean>
    
    
    <!-- 采用自动扫描方式创建mapper bean(批量更新模式) -->  
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.saml.inter" />
	    <property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory" />  
	</bean>
    
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
      <property name="maxUploadSize" value="524288000"/>
        <property name="maxInMemorySize" value="4096"/>
        <property name="defaultEncoding" value="utf-8" />
   </bean>
</beans> 